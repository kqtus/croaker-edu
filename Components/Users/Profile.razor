@using System.Collections.Generic
@using edu_croaker.Data
@using edu_croaker.Dtos
@using edu_croaker.Services

@inject UserService UserSrv
@namespace Components

<style>
    .icon {
        font-size: 14px;
    }

    .profile-content {
        text-align: center;
    }

    .profile-footer {
        margin-top: 10px;
        text-align: right;
    }

    .menu-btn-inline {
        vertical-align: middle !important;
    }
</style>

<div class="card">
    <div class="card-body">
        <a href="/">
            <h2 style="font-weight: bold">
                Croaker
            </h2>
        </a>
        <hr />

        <div class="col-auto" style="text-align: center">
            <img src="@UserData?.Avatar" alt="avatar" style="width: 50px; height: 50px; margin: 10px" />
            <p class="h5">@UserData?.DisplayedName</p>
            <p class="h6 text-muted">@@@UserData?.Username</p>
        </div>

        <div class="profile-content">
            <ul class="list-group">
                <li class="list-group-item">
                    <a href="">
                        <strong>@UserData?.PostsCount</strong> posts
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="/followers/@UserData?.Username">
                        <strong>@UserData?.FollowersCount</strong> followers
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="/following/@UserData?.Username">
                        <strong>@UserData?.FollowedCount</strong> following
                    </a>
                </li>
            </ul>

            <div style="text-align: left">
                <hr />
                <h2>
                    <a href="/" class="badge badge-pill badge-light">
                        <span class="material-icons menu-btn-inline">home</span>
                        <span class="menu-btn-inline"> Home</span>
                    </a>
                </h2>
                <hr />
                <h2 class="menu-btn">
                    <a class="badge badge-pill badge-light" style="cursor: pointer" data-toggle="modal" data-target="#write-modal">
                        <span class="material-icons menu-btn-inline">mail_outline</span>
                        <span class="menu-btn-inline"> Write</span>
                    </a>
                </h2>
                <hr />
                <h2 class=".menu-btn">
                    <a href="Identity/Account/Manage" class="badge badge-pill badge-light">
                        <span class="material-icons menu-btn-inline">settings_applications</span>
                        <span class="menu-btn-inline"> Settings</span>
                    </a>
                </h2>
                <hr />
                <h2 class=".menu-btn">
                    <form method="post" action="Identity/Account/LogOut">
                        <button style="background: none !important; border: none; padding: 0 !important; outline: none;">
                            <a class="btn badge badge-pill badge-light">
                                <span class="material-icons menu-btn-inline">exit_to_app</span>
                                <span class="menu-btn-inline"> Log out</span>
                            </a>
                        </button>
                    </form>
                </h2>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public PublicUserData UserData { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        await FetchUserData();
    }

    protected async Task FetchUserData()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        UserData = await UserSrv.GetPublicUserData(user.Identity.Name);
        StateHasChanged();
    }
}