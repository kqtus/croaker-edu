
@using System.Collections.Generic
@using Microsoft.AspNetCore.Identity
@using AspNetCore.Identity.LiteDB.Models
@using edu_croaker.Dtos
@using edu_croaker.Services

@inject UserService UserSrv
@inject UserManager<ApplicationUser> UserMgr

@implements IDisposable

@namespace Components

<div class="card">
    <div class="card-body">
        <h5>Discover</h5>
    </div>

    <ul class="list-group list-group-flush">
        @foreach (var user in UsersToDiscover)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <a href="/byUser/@user.UserId">
                    @@@user.Username
                </a>
                <button 
                    @onclick="@(() => OnFollowClick(user.UserId))"
                    type="button" 
                    class="btn btn-primary btn-sm float-right"
                >Follow 
                </button>
            </li>
        }
    </ul>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private IEnumerable<PublicUserData> UsersToDiscover = new List<PublicUserData>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;

        UsersToDiscover = await UserSrv.GetUsersToDiscover(UserMgr.GetUserId(authState.User));
    }

    public void Dispose()
    {

    }

    public async Task OnFollowClick(string followedUserId)
    {
        var authState = await AuthenticationStateTask;
        var userId = UserMgr.GetUserId(authState.User);

        UserSrv.FollowUser(new FollowerDto()
        {
            FollowedUserId = followedUserId,
            FollowingUserId = userId
        });
    }
}
